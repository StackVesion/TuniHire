pipeline {
    agent any
    
    environment {
        // Environment variables
        NODE_VERSION = 'node:18'
        MONGODB_CONNECTION = credentials('mongodb://127.0.0.1:27017/TuniHireDB')
        JWT_SECRET = credentials('129a49a5-dda6-49f9-8b5f-86a39c5cd7d9')
        FRONTEND_URL = 'http://localhost:3000'
        BACKEND_URL = 'http://localhost:5000'
        COMPANY_PANEL_URL = 'http://localhost:3001'
        ADMIN_PANEL_URL = 'http://localhost:3002'
        
        // Docker & Nexus configuration
        DOCKER_REGISTRY = '172.23.202.74:8083'
        DOCKER_CREDENTIALS = credentials('nexus')
        registryCredentials = "nexus"
        registry = "172.23.202.74:8083"
        
        // SonarQube configuration
        SONAR_HOST_URL = 'http://172.23.202.74:9000'
        SONAR_TOKEN = credentials('sonar')
        
        // Version info (using Jenkins BUILD_NUMBER)
        APP_VERSION = "1.0.${BUILD_NUMBER}"
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        // Ensure we have the necessary tools
        stage('Setup Tools') {
            steps {
                script {
                    // Check if we need to install Node.js
                    def nodeInstalled = sh(script: 'which node || echo "not found"', returnStdout: true).trim()
                    if (nodeInstalled == "not found") {
                        echo "Installing Node.js..."
                        sh 'curl -fsSL https://deb.nodesource.com/setup_18.x | bash -'
                        sh 'apt-get install -y nodejs'
                    }
                    
                    // Install SonarScanner for Node.js projects
                    sh 'npm install -g sonar-scanner'
                    
                    // Display versions for logging
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'sonar-scanner --version || echo "SonarScanner installation may have issues"'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            when {
                expression { return !params.SKIP_SONAR }
            }
            parallel {
                stage('Backend Analysis') {
                    steps {
                        dir('Back-end') {
                            sh """
                                sonar-scanner \
                                  -Dsonar.projectKey=tunihire-backend \
                                  -Dsonar.projectName='TuniHire Backend' \
                                  -Dsonar.host.url=${SONAR_HOST_URL} \
                                  -Dsonar.login=${SONAR_TOKEN} \
                                  -Dsonar.sources=. \
                                  -Dsonar.exclusions=node_modules/**,test/**,coverage/** \
                                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                            """
                        }
                    }
                }
                
                stage('Frontend Analysis') {
                    steps {
                        dir('Front-End') {
                            sh """
                                sonar-scanner \
                                  -Dsonar.projectKey=tunihire-frontend \
                                  -Dsonar.projectName='TuniHire Frontend' \
                                  -Dsonar.host.url=${SONAR_HOST_URL} \
                                  -Dsonar.login=${SONAR_TOKEN} \
                                  -Dsonar.sources=. \
                                  -Dsonar.exclusions=node_modules/**,.next/**,out/**,coverage/** \
                                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                            """
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            when {
                expression { return !params.SKIP_SONAR }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        // Back-end pipeline
        stage('Backend') {
            stages {
                stage('Install Dependencies') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Back-end') {
                            sh 'npm install'
                        }
                    }
                }
                
                stage('Run Tests with Mocha') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Back-end') {
                            sh '''
                                npm install -g mocha nyc
                                nyc --reporter=lcov --reporter=text-summary mocha --recursive './test/**/*.test.js'
                            '''
                        }
                    }
                    post {
                        always {
                            junit 'Back-end/test-results.xml'
                            publishHTML(target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'Back-end/coverage',
                                reportFiles: 'index.html',
                                reportName: 'Backend Test Coverage'
                            ])
                        }
                    }
                }
                
                stage('Build application') {
                    steps {
                        dir('Back-end') {
                            sh 'npm run build-dev'
                        }
                    }
                }
            }
        }
        
        // Front-End pipeline
        stage('Front-End') {
            stages {
                stage('Install Dependencies') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Front-End') {
                            sh 'npm install'
                        }
                    }
                }
                
                stage('Run Tests') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Front-End') {
                            sh 'npm test'
                        }
                    }
                }
                
                stage('Build') {
                    steps {
                        dir('Front-End') {
                            sh 'npm run build-dev'
                        }
                    }
                }
            }
        }
        
        // Admin Panel pipeline
        stage('Admin Panel') {
            stages {
                stage('Install Dependencies') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Admin-Panel') {
                            sh 'npm install'
                        }
                    }
                }
                
                stage('Run Tests') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Admin-Panel') {
                            sh 'npm test -- --watchAll=false'
                        }
                    }
                }
                
                stage('Build') {
                    steps {
                        dir('Admin-Panel') {
                            sh 'npm run build-dev'
                        }
                    }
                }
            }
        }
        
        // Company Panel pipeline
        stage('Company Panel') {
            stages {
                stage('Install Dependencies') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Company-Panel') {
                            sh 'npm install'
                        }
                    }
                }
                
                stage('Run Tests') {
                    when {
                        expression { return !params.SKIP_TESTS }
                    }
                    steps {
                        dir('Company-Panel') {
                            sh 'npm test || echo "No tests found"'
                        }
                    }
                }
                
                stage('Build') {
                    steps {
                        dir('Company-Panel') {
                            sh 'npm run build-dev'
                        }
                    }
                }
            }
        }
        
        // Building Docker images
        stage('Building images (node and mongo)') {
            steps {
                script {
                    sh('docker-compose build')
                }
            }
        }
        
        // Uploading Docker images into Nexus Registry
        stage('Deploy to Nexus') {
            steps { 
                script {
                    docker.withRegistry("http://"+registry, registryCredentials) {
                        sh('docker push $registry/nodemongoapp:6.0')
                    }
                }
            }
        }
        
        // Run the application
        stage('Run application') {
            steps { 
                script {
                    docker.withRegistry("http://"+registry, registryCredentials) {
                        sh('docker pull $registry/nodemongoapp:6.0')
                        sh('docker-compose up -d')
                    }
                }
            }
        }
        
        // Run Prometheus monitoring
        stage('Run Prometheus') {
            steps {
                script {
                    sh 'docker start prometheus || docker run -d --name prometheus -p 9090:9090 prom/prometheus'
                }
            }
        }
        
        // Run Grafana
        stage('Run Grafana') {
            steps {
                script {
                    sh 'docker start grafana || docker run -d --name grafana -p 3000:3000 grafana/grafana'
                }
            }
        }
    }
    
    post {
        success {
    echo 'Pipeline completed successfully!'
    sh '''
        curl -X POST -H 'Content-Type: application/json' -d '{"text": "🚀 TuniHire deployment successful! Version: ${APP_VERSION}"}' ${SLACK_WEBHOOK_URL}
    '''
} 
        failure {
    echo 'Pipeline failed!'
    sh '''
        curl -X POST -H 'Content-Type: application/json' -d '{"text": "❌ TuniHire deployment failed! See ${BUILD_URL} for details."}' ${SLACK_WEBHOOK_URL}
    '''
} 
        always {
    echo 'Cleaning up workspace...'
    cleanWs()
} 
    }
    
    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip SonarQube analysis')
        string(name: 'SLACK_WEBHOOK_URL', defaultValue: '', description: 'Slack webhook URL for notifications')
        credentials(name: 'MONGO_CREDENTIALS', description: 'MongoDB credentials', defaultValue: 'mongodb-credentials', credentialType: 'Username with password')
        password(name: 'GRAFANA_PASSWORD', defaultValue: 'admin', description: 'Grafana admin password')
    }
}
