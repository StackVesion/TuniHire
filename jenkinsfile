pipeline {
    agent any

    environment {
        SONAR_HOST_URL = "http://localhost:9000"
        NEXUS_REGISTRY_URL = "localhost:8083"
        NEXUS_CREDENTIALS_ID = "nexus"
        GITHUB_CREDENTIALS_ID = "98a74c8f-9f44-4e31-aa6a-6eec112c23f4"
        BASE_APP_VERSION = "1.0.${BUILD_NUMBER}"
        GITHUB_CALLBACK_URL_CONFIG = "http://localhost:5000/auth/github/callback"
        FRONTEND_URL_CONFIG = "http://localhost:3000"
        SMTP_PORT_CONFIG = "587"
    }

    tools {
        // SonarScanner tool named 'scanner'
        sonarScanner 'scanner'
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        parallelsAlwaysFailFast()
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip Sonar analysis')
        booleanParam(name: 'SKIP_DOCKER_BUILD_PUSH', defaultValue: false, description: 'Skip Docker build & push')
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip deployment')
    }

    stages {
        stage('Modules CI') {
            parallel {
                stage('Backend CI') {
                    environment { MODULE_DIR = 'Back-End'; SONAR_PROJECT_KEY = 'TuniHire_Backend' }
                    stages {
                        stage('Checkout & Install') {
                            steps {
                                dir(MODULE_DIR) {
                                    checkout([
                                        $class: 'GitSCM', branches: scm.branches, userRemoteConfigs: scm.userRemoteConfigs,
                                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: MODULE_DIR]]
                                    ])
                                    sh 'npm install'
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { !params.SKIP_TESTS } }
                            steps { dir(MODULE_DIR) { sh 'npm test' } }
                            post { always { dir(MODULE_DIR) { junit allowEmptyResults: true, testResults: 'test-results.xml' } } }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool 'scanner'}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=."
                                    }
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { !params.SKIP_SONAR } }
                            steps { waitForQualityGate abortPipeline: true }
                        }
                    }
                }

                // Similar stages for Front-End, Company-Panel, Admin-Panel...

                stage('AI-Service CI') {
                    agent { docker { image 'python:3.9-slim' } }
                    environment { MODULE_DIR = 'AI-Service'; SONAR_PROJECT_KEY = 'TuniHire_AIService' }
                    stages {
                        stage('Install Dependencies') {
                            steps { sh "pip install --no-cache-dir -r ${MODULE_DIR}/requirements.txt" }
                        }
                        stage('Run Tests') {
                            when { expression { !params.SKIP_TESTS } }
                            steps { sh "pytest ${MODULE_DIR} --junitxml=test-results.xml" }
                            post { always { junit allowEmptyResults: true, testResults: 'test-results.xml' } }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                withSonarQubeEnv('scanner') {
                                    sh "${tool 'scanner'}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=${MODULE_DIR} -Dsonar.python.version=3.9"
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { !params.SKIP_SONAR } }
                            steps { waitForQualityGate abortPipeline: true }
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            when { expression { !params.SKIP_DOCKER_BUILD_PUSH } }
            steps {
                sh 'docker-compose -f docker-compose.yml build'
                withDockerRegistry(credentialsId: env.NEXUS_CREDENTIALS_ID, registry: "http://${env.NEXUS_REGISTRY_URL}") {
                    sh 'docker-compose -f docker-compose.yml push'
                }
            }
        }

        stage('Deploy Application') {
            when { expression { !params.SKIP_DEPLOY } }
            steps {
                sh 'docker-compose -f docker-compose.yml down --remove-orphans'
                withCredentials([string(credentialsId: 'SESSION_SECRET', variable: 'SESSION_SECRET'), /* others */]) {
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }
    }

    post {
        always { cleanWs() }
        success { echo 'Pipeline completed successfully.' }
        failure { echo 'Pipeline failed.' }
    }
}
