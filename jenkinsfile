pipeline {
    agent any

    environment {
        NODE_VERSION = 'node:18'
        MONGODB_CONNECTION = credentials('mongodb://127.0.0.1:27017/TuniHireDB')
        
        DOCKER_REGISTRY = '172.23.202.74:8083'
        DOCKER_CREDENTIALS = credentials('nexus')
        registryCredentials = "nexus"
        registry = "172.23.202.74:8083"

        SONAR_HOST_URL = 'http://172.23.202.74:9000'
        SONAR_TOKEN = credentials('scanner')
        
        APP_VERSION = "1.0.${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                dir('Back-end') {
                    sh 'npm install'
                }
            }
        }

        stage('Run Backend Tests') {
            steps {
                dir('Back-end') {
                    sh '''
                        nyc --reporter=lcov --reporter=text-summary mocha --recursive "./test/**/*.test.js"
                    '''
                }
            }
            post {
                always {
                    junit 'Back-end/test-results.xml'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'Back-end/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Backend Test Coverage'
                    ])
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Back-end') {
                    sh """
                        sonar-scanner \
                          -Dsonar.projectKey=tunihire-backend \
                          -Dsonar.projectName='TuniHire Backend' \
                          -Dsonar.host.url=${SONAR_HOST_URL} \
                          -Dsonar.login=${SONAR_TOKEN} \
                          -Dsonar.sources=. \
                          -Dsonar.exclusions=node_modules/**,test/**,coverage/** \
                          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                sh 'docker-compose build backend'
            }
        }

        stage('Push to Nexus') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh 'docker push $registry/nodemongoapp:6.0'
                    }
                }
            }
        }

        stage('Run App with Docker') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh '''
                            docker pull $registry/nodemongoapp:6.0
                            docker-compose up -d backend
                        '''
                    }
                }
            }
        }

    }

    post {
        success {
            echo '✅ Backend pipeline completed successfully!'
        }
        failure {
            echo '❌ Backend pipeline failed!'
        }
        always {
            cleanWs()
        }
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip SonarQube analysis')
    }
}
