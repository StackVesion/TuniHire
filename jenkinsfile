pipeline {
    agent any // Default agent for most stages

    environment {
        scannerHome = tool 'scanner' // This might still be used by other stages or for general SonarQube plugin functionality
        // WSL & Docker Configuration
        SONAR_HOST_URL        = "http://172.23.202.74:9000"
        NEXUS_REGISTRY_URL    = "172.23.202.74:8083" 
        NEXUS_CREDENTIALS_ID   = "nexus"
        SONAR_TOKEN_ID         = "scanner" // This is the Jenkins credential ID for SonarQube token
        GITHUB_CREDENTIALS_ID  = "98a74c8f-9f44-4e31-aa6a-6eec112c23f4"

        // Base App Version
        BASE_APP_VERSION       = "1.0.${BUILD_NUMBER}"

        // Fixed URLs for Backend
        GITHUB_CALLBACK_URL    = "http://localhost:5000/auth/github/callback"
        FRONTEND_URL           = "http://localhost:3000"
        SMTP_PORT              = "587"
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        parallelsAlwaysFailFast()
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS',            defaultValue: false, description: 'Skip tests')
        booleanParam(name: 'SKIP_SONAR',            defaultValue: false, description: 'Skip Sonar analysis')
        booleanParam(name: 'SKIP_DOCKER_BUILD_PUSH',defaultValue: false, description: 'Skip Docker build & push')
        booleanParam(name: 'SKIP_DEPLOY',           defaultValue: false, description: 'Skip deployment')
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out SCM..."
            checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    echo "Node.js Version:"        
                    sh "node --version"
                    echo "NPM Version:"
                    sh "npm --version"
                    echo "Java Version:"
                    sh "java --version"
                    sh "docker --version"
                    sh "docker-compose --version"
                }
            }
        }

        stage('Modules CI') {
            parallel {
                // Backend CI
                stage('Backend CI') {
                    environment {
                        MODULE_DIR       = 'Back-End'
                        SONAR_PROJECT_KEY= 'TuniHire_Backend'
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    sh 'npm install'
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { !params.SKIP_TESTS } }
                            steps { dir(MODULE_DIR) { sh 'npm run test || true' } } // MODIFIED
                            post { always { dir(MODULE_DIR) { junit allowEmptyResults:true, testResults:'test-results.xml' } } }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool 'scanner'}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=."
                                    }
                                }
                            }
                        }
                        // stage('Quality Gate') {
                        //     when { expression { !params.SKIP_SONAR } }
                        //     steps { waitForQualityGate abortPipeline:true }
                        // }
                    }
                }

                // Front-End CI
                stage('Front-End CI') {
                    environment {
                        MODULE_DIR       = 'Front-End'
                        SONAR_PROJECT_KEY= 'TuniHire_Frontend'
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    sh 'npm install'
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { !params.SKIP_TESTS } }
                            steps { dir(MODULE_DIR) { sh 'npm run test || true' } } // MODIFIED
                            post { always { dir(MODULE_DIR) { junit allowEmptyResults:true, testResults:'test-results.xml' } } }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool 'scanner'}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=."
                                    }
                                }
                            }
                        }
                        // stage('Quality Gate') {
                        //     when { expression { !params.SKIP_SONAR } }
                        //     steps { waitForQualityGate abortPipeline:true }
                        // }
                    }
                }

                // Company-Panel CI
                stage('Company-Panel CI') {
                    environment {
                        MODULE_DIR       = 'Company-Panel'
                        SONAR_PROJECT_KEY= 'TuniHire_CompanyPanel'
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    sh 'npm install'
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { !params.SKIP_TESTS } }
                            steps { dir(MODULE_DIR) { sh 'npm run test || true' } } // MODIFIED
                            post { always { dir(MODULE_DIR) { junit allowEmptyResults:true, testResults:'test-results.xml' } } }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool 'scanner'}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=."
                                    }
                                }
                            }
                        }
                        // stage('Quality Gate') {
                        //     when { expression { !params.SKIP_SONAR } }
                        //     steps { waitForQualityGate abortPipeline:true }
                        // }
                    }
                }

                // Admin-Panel CI
                stage('Admin-Panel CI') {
                    environment {
                        MODULE_DIR       = 'Admin-Panel'
                        SONAR_PROJECT_KEY= 'TuniHire_AdminPanel'
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    sh 'npm install'
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { !params.SKIP_TESTS } }
                            steps { dir(MODULE_DIR) { sh 'npm run test || true' } } // MODIFIED
                            post { always { dir(MODULE_DIR) { junit allowEmptyResults:true, testResults:'test-results.xml' } } }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool 'scanner'}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=."
                                    }
                                }
                            }
                        }
                        // stage('Quality Gate') {
                        //     when { expression { !params.SKIP_SONAR } }
                        //     steps { waitForQualityGate abortPipeline:true }
                        // }
                    }
                }

                // AI-Service CI
                stage('AI-Service CI') {
                    agent { 
                        dockerfile { 
                            dir 'AI-Service' 
                            filename 'Dockerfile' 
                            additionalBuildArgs '--platform=linux/amd64' // Assurer la compatibilité si l'hôte Jenkins est sur une autre archi
                        }
                    }
                    environment {
                        // MODULE_DIR       = 'AI-Service' // N'est plus nécessaire car on est dans le contexte du Dockerfile
                        SONAR_PROJECT_KEY= 'TuniHire_AIService'
                    }
                    stages {
                     stage('Install Dependencies') {
                      steps {
                         echo "Python dependencies were installed inside the image already."
                             sh "pip list"                        // instead of /opt/venv/bin/pip list
                         }
                     }
                     stage('Run Tests') {
                     when { expression { !params.SKIP_TESTS } }
                        steps {
                          sh "pytest . --junitxml=test-results.xml || echo 'tests failed or none found'"
                     }
                            post { always { junit allowEmptyResults: true, testResults: 'test-results.xml' } }
                          }
                        stage('SonarQube Analysis') {
                            when { expression { !params.SKIP_SONAR } }
                            steps {
                                // Utiliser le sonar-scanner installé dans l'image Docker (il est dans le PATH)
                                // withSonarQubeEnv injecte les variables SONAR_HOST_URL et SONAR_AUTH_TOKEN (ou login/password)
                                withSonarQubeEnv('scanner') {
                                 // no need to point at /opt/venv/python
                             sh "sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=. -Dsonar.python.version=3.9"
                            }
                            }
                        }
                        // stage('Quality Gate') {
                        //     when { expression { !params.SKIP_SONAR } }
                        //     steps { waitForQualityGate abortPipeline:true }
                        // }
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            when { expression { !params.SKIP_DOCKER_BUILD_PUSH } }
            steps {
                sh 'docker-compose -f docker-compose.yml build'
                withDockerRegistry(credentialsId: env.NEXUS_CREDENTIALS_ID, url: "http://${env.NEXUS_REGISTRY_URL}") {
                    sh 'docker-compose -f docker-compose.yml push'
                }
            }
        }

        stage('Deploy Application') {
            when { expression { !params.SKIP_DEPLOY } }
            steps {
                sh 'docker-compose -f docker-compose.yml down --remove-orphans'
                // Pull explicite des dernières images depuis Nexus, comme suggéré par le guide et les bonnes pratiques
                withDockerRegistry(credentialsId: env.NEXUS_CREDENTIALS_ID, url: "http://${env.NEXUS_REGISTRY_URL}") {
                    sh 'docker-compose -f docker-compose.yml pull'
                }
                withCredentials([
                        string(credentialsId: 'SESSION_SECRET',      variable: 'SESSION_SECRET'),
                        string(credentialsId: 'OPENAI_API_KEY',     variable: 'OPENAI_API_KEY'),
                        string(credentialsId: 'JWT_SECRET',         variable: 'JWT_SECRET'),
                        string(credentialsId: 'GOOGLE_CLIENT_ID',   variable: 'GOOGLE_CLIENT_ID'),
                        string(credentialsId: 'GOOGLE_CLIENT_SECRET', variable: 'GOOGLE_CLIENT_SECRET'),
                        string(credentialsId: 'GITHUB_CLIENT_ID',   variable: 'GITHUB_CLIENT_ID'),
                        string(credentialsId: 'GITHUB_CLIENT_SECRET',variable: 'GITHUB_CLIENT_SECRET'),
                        string(credentialsId: 'EMAIL_USER',         variable: 'EMAIL_USER'),
                        string(credentialsId: 'EMAIL_PASSWORD',     variable: 'EMAIL_PASSWORD'),
                        string(credentialsId: 'EMAIL_APP_USER',     variable: 'EMAIL_APP_USER'),
                        string(credentialsId: 'EMAIL_APP_PASSWORD', variable: 'EMAIL_APP_PASSWORD')
                    ]) {
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }
    }

    post {
       // always { cleanWs() }
        success { echo 'Pipeline completed successfully.' }
        failure { echo 'Pipeline failed.' }
    }
}

