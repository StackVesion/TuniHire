pipeline {
    agent any

    environment {
        NODE_VERSION         = 'node:18'
        DOCKER_REGISTRY      = '172.23.202.74:8083'
        registry             = '172.23.202.74:8083' // Gardé pour référence, mais on forcera http://
        registryCredentials  = 'docker' // Assurez-vous que cet ID de credential Jenkins est correct et a les droits de push
        APP_VERSION          = "1.0.${BUILD_NUMBER}"

        // Secrets...
        SESSION_SECRET       = credentials('SESSION_SECRET')
        JWT_SECRET           = credentials('JWT_SECRET')
        OPENAI_API_KEY       = credentials('OPENAI_API_KEY')
        GOOGLE_CLIENT_ID     = credentials('GOOGLE_CLIENT_ID')
        GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET')
        GITHUB_CLIENT_ID     = credentials('GITHUB_CLIENT_ID')
        GITHUB_CLIENT_SECRET = credentials('GITHUB_CLIENT_SECRET')
        EMAIL_USER           = credentials('EMAIL_USER')
        EMAIL_PASSWORD       = credentials('EMAIL_PASSWORD')
        EMAIL_APP_USER       = credentials('EMAIL_APP_USER')
        EMAIL_APP_PASSWORD   = credentials('EMAIL_APP_PASSWORD')
        STRIPE_SECRET_KEY    = credentials('STRIPE_SECRET_KEY')
        STRIPE_PUBLISHABLE_KEY = credentials('STRIPE_PUBLISHABLE_KEY')
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip SonarQube analysis')
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Install Backend Dependencies') {
            steps {
                dir('Back-end') {
                    sh 'npm install'
                }
            }
        }

        stage('Run Backend Tests') {
            when { expression { !params.SKIP_TESTS } }
            steps {
                dir('Back-end') {
                    sh '''
                        nyc --reporter=lcov --reporter=text-summary mocha --recursive "./test/**/*.test.js"
                    '''
                }
            }
            post {
                always {
                    junit 'Back-end/test-results.xml'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'Back-end/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Backend Test Coverage'
                    ])
                }
            }
        }

        stage('SonarQube Analysis') {
            when { expression { !params.SKIP_SONAR } }
            steps {
                dir('Back-end') {
                    script {
                        def scannerHome = tool 'scanner'
                        withSonarQubeEnv('scanner') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                  -Dsonar.projectKey=tunihire-backend \
                                  -Dsonar.projectName='TuniHire Backend' \
                                  -Dsonar.sources=. \
                                  -Dsonar.exclusions=node_modules/**,test/**,coverage/** \
                                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker-compose build backend'
            }
        }

        stage('Push to Nexus') {
            steps {
                script {
                    // L'image construite par docker-compose est nommée ${DOCKER_REGISTRY}/backend:latest
                    // Nous la taguons pour le dépôt Nexus
                    def nexusImageName = "${DOCKER_REGISTRY}/docker-repo/backend:latest"
                    sh "docker tag ${DOCKER_REGISTRY}/backend:latest ${nexusImageName}"
                    
                    // Utilisation explicite de http:// pour la connexion au registre Nexus
                    docker.withRegistry("http://${DOCKER_REGISTRY}", registryCredentials) {
                        sh "docker push ${nexusImageName}"
                    }
                }
            }
        }

        stage('Run App with Docker') {
            steps {
                script {
                    def nexusImageName = "${DOCKER_REGISTRY}/docker-repo/backend:latest"
                    // Utilisation explicite de http:// pour la connexion au registre Nexus
                    docker.withRegistry("http://${DOCKER_REGISTRY}", registryCredentials) {
                        sh """
                            docker pull ${nexusImageName}
                            docker tag ${nexusImageName} backend // Retag pour docker-compose up
                            docker-compose up -d backend
                        """
                    }
                }
            }
        }
    }

    post {
        success { echo '✅ Backend pipeline completed successfully!' }
        failure { echo '❌ Backend pipeline failed!' }
        always  { cleanWs() }
    }
}

