pipeline {
    agent any

    environment {
        NODE_VERSION = 'node:18'
        // MONGODB_CONNECTION est maintenant géré via docker-compose.yml pour le service backend
        // Il pourrait toujours être nécessaire ici si d'autres étapes Jenkins en ont besoin directement,
        // mais pour l'application elle-même, c'est dans docker-compose.yml.
        // Pour l'instant, je le laisse commenté car le docker-compose.yml a été adapté.
        // MONGODB_CONNECTION = credentials('mongodb://127.0.0.1:27017/TuniHireDB') 

        DOCKER_REGISTRY = '172.23.202.74:8083'
        DOCKER_CREDENTIALS = credentials('nexus')
        registryCredentials = "nexus"
        registry = "172.23.202.74:8083"

        // SONAR_HOST_URL et SONAR_TOKEN ne sont plus nécessaires ici si withSonarQubeEnv est utilisé
        // et que le serveur SonarQube est configuré dans Jenkins.
        // SONAR_HOST_URL = 'http://172.23.202.74:9000'
        // SONAR_TOKEN = credentials('scanner')

        APP_VERSION = "1.0.${BUILD_NUMBER}"

        // Secrets pour le backend, chargés depuis les credentials Jenkins
        SESSION_SECRET = credentials('SESSION_SECRET')
        JWT_SECRET = credentials('JWT_SECRET')
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        GOOGLE_CLIENT_ID = credentials('GOOGLE_CLIENT_ID')
        GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET')
        GITHUB_CLIENT_ID = credentials('GITHUB_CLIENT_ID')
        GITHUB_CLIENT_SECRET = credentials('GITHUB_CLIENT_SECRET')
        EMAIL_USER = credentials('EMAIL_USER')
        EMAIL_PASSWORD = credentials('EMAIL_PASSWORD')
        EMAIL_APP_USER = credentials('EMAIL_APP_USER')
        EMAIL_APP_PASSWORD = credentials('EMAIL_APP_PASSWORD')
        STRIPE_SECRET_KEY = credentials('STRIPE_SECRET_KEY') // Ajouté car présent dans le docker-compose.yml
        STRIPE_PUBLISHABLE_KEY = credentials('STRIPE_PUBLISHABLE_KEY') // Ajouté car présent dans le docker-compose.yml
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                dir('Back-end') {
                    sh 'npm install'
                }
            }
        }

        stage('Run Backend Tests') {
            when {
                expression { params.SKIP_TESTS == false }
            }
            steps {
                dir('Back-end') {
                    sh '''
                        nyc --reporter=lcov --reporter=text-summary mocha --recursive "./test/**/*.test.js"
                    '''
                }
            }
            post {
                always {
                    junit 'Back-end/test-results.xml'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'Back-end/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Backend Test Coverage'
                    ])
                }
            }
        }

        stage('SonarQube Analysis') {
            // Optionnel: rendre cette étape skipable aussi si les tests sont skippés et que l'analyse dépend des résultats des tests
            // when {
            //    expression { params.SKIP_TESTS == false && params.SKIP_SONAR == false }
            // }
            // Ou simplement utiliser le paramètre SKIP_SONAR existant
            when {
                expression { params.SKIP_SONAR == false }
            }
            steps {
                dir('Back-end') {
                    script {
                        // Assurez-vous que 'scanner' est le nom de votre SonarQube Scanner configuré dans Jenkins Global Tool Configuration
                        // et 'SonarQubeServer' (ou le nom que vous avez donné) est configuré dans Jenkins > Configure System.
                        def scannerHome = tool 'scanner'
                        withSonarQubeEnv('scanner') { // Remplacer 'SonarQubeServer' par le nom réel de la conf serveur SonarQube dans Jenkins
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                  -Dsonar.projectKey=tunihire-backend \
                                  -Dsonar.projectName='TuniHire Backend' \
                                  -Dsonar.sources=. \
                                  -Dsonar.exclusions=node_modules/**,test/**,coverage/** \
                                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            // Optionnel: rendre cette étape skipable aussi si Sonar est skippé
            when {
                expression { params.SKIP_SONAR == false }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                // docker-compose.yml est à la racine du projet
                sh 'docker-compose build backend'
            }
        }

        stage('Push to Nexus') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh 'docker push ${DOCKER_REGISTRY}/nodemongoapp:6.0'
                    }
                }
            }
        }

        stage('Run App with Docker') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh '''
                            docker pull ${DOCKER_REGISTRY}/nodemongoapp:6.0
                            docker-compose up -d backend
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Backend pipeline completed successfully!'
        }
        failure {
            echo '❌ Backend pipeline failed!'
        }
        always {
            cleanWs()
        }
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip SonarQube analysis')
    }
}

