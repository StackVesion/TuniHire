pipeline {
    agent any // Default agent for most stages

    environment {
        // WSL & Docker Configuration
        SONAR_HOST_URL = "http://localhost:9000"
        NEXUS_REGISTRY_URL = "localhost:8083" // Nexus Docker hosted repo (HTTP)
        NEXUS_CREDENTIALS_ID = "nexus" 
        SONAR_TOKEN_ID = "scanner" 
        GITHUB_CREDENTIALS_ID = "98a74c8f-9f44-4e31-aa6a-6eec112c23f4"

        // Base App Version
        BASE_APP_VERSION = "1.0.${BUILD_NUMBER}"

        // Fixed URLs for Backend
        GITHUB_CALLBACK_URL_CONFIG = "http://localhost:5000/auth/github/callback"
        FRONTEND_URL_CONFIG = "http://localhost:3000"
        SMTP_PORT_CONFIG = "587"
    }

    // tools {} block removed as Node.js and JDK are expected on the agent

    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        parallelsAlwaysFailFast()
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests for all modules')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip SonarQube analysis for all modules')
        booleanParam(name: 'SKIP_DOCKER_BUILD_PUSH', defaultValue: false, description: 'Skip Docker build and push stages for all modules')
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip final Docker Compose deployment')
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out SCM..."
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    echo "Node.js Version:"
                    sh "node --version"
                    echo "NPM Version:"
                    sh "npm --version"
                    echo "Java Version:"
                    sh "java --version"
                    sh "docker --version"
                    sh "docker-compose --version"
                }
            }
        }

        stage('Modules CI') {
            failFast true
            parallel {
                // --- Backend Module ---
                stage('Backend CI') {
                    environment {
                        MODULE_DIR = "Back-End"
                        MODULE_NAME = "tunihire-backend"
                        SONAR_PROJECT_KEY = "TuniHire_Backend"
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Installing ${MODULE_NAME} dependencies..."
                                    sh "npm install"
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { return !params.SKIP_TESTS } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running ${MODULE_NAME} tests..."
                                    sh "npm test"
                                }
                            }
                            post {
                                always {
                                    dir(MODULE_DIR) {
                                        junit allowEmptyResults: true, testResults: 'test-results.xml'
                                    }
                                }
                            }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running SonarQube analysis for ${MODULE_NAME}..."
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool('SonarScanner')}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY}" // Assumes SonarScanner tool is named 'SonarScanner'
                                    }
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                echo "Checking SonarQube Quality Gate for ${MODULE_NAME}..."
                                timeout(time: 5, unit: 'MINUTES') {
                                    waitForQualityGate abortPipeline: true
                                }
                            }
                        }
                    }
                }

                // --- Front-End Module ---
                stage('Front-End CI') {
                    environment {
                        MODULE_DIR = "Front-End"
                        MODULE_NAME = "tunihire-frontend"
                        SONAR_PROJECT_KEY = "TuniHire_Frontend"
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Installing ${MODULE_NAME} dependencies..."
                                    sh "npm install"
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { return !params.SKIP_TESTS } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running ${MODULE_NAME} tests..."
                                    sh "npm test"
                                }
                            }
                            post {
                                always {
                                    dir(MODULE_DIR) {
                                        junit allowEmptyResults: true, testResults: 'test-results.xml'
                                    }
                                }
                            }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running SonarQube analysis for ${MODULE_NAME}..."
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool('SonarScanner')}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY}"
                                    }
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                echo "Checking SonarQube Quality Gate for ${MODULE_NAME}..."
                                timeout(time: 5, unit: 'MINUTES') {
                                    waitForQualityGate abortPipeline: true
                                }
                            }
                        }
                    }
                }

                // --- Company-Panel Module ---
                stage('Company-Panel CI') {
                    environment {
                        MODULE_DIR = "Company-Panel"
                        MODULE_NAME = "tunihire-company-panel"
                        SONAR_PROJECT_KEY = "TuniHire_CompanyPanel"
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Installing ${MODULE_NAME} dependencies..."
                                    sh "npm install"
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { return !params.SKIP_TESTS } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running ${MODULE_NAME} tests..."
                                    sh "npm test"
                                }
                            }
                            post {
                                always {
                                    dir(MODULE_DIR) {
                                        junit allowEmptyResults: true, testResults: 'test-results.xml'
                                    }
                                }
                            }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running SonarQube analysis for ${MODULE_NAME}..."
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool('SonarScanner')}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY}"
                                    }
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                echo "Checking SonarQube Quality Gate for ${MODULE_NAME}..."
                                timeout(time: 5, unit: 'MINUTES') {
                                    waitForQualityGate abortPipeline: true
                                }
                            }
                        }
                    }
                }

                // --- Admin-Panel Module ---
                stage('Admin-Panel CI') {
                    environment {
                        MODULE_DIR = "Admin-Panel"
                        MODULE_NAME = "tunihire-admin-panel"
                        SONAR_PROJECT_KEY = "TuniHire_AdminPanel"
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Installing ${MODULE_NAME} dependencies..."
                                    sh "npm install"
                                }
                            }
                        }
                        stage('Run Tests') {
                            when { expression { return !params.SKIP_TESTS } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running ${MODULE_NAME} tests..."
                                    sh "npm test"
                                }
                            }
                            post {
                                always {
                                    dir(MODULE_DIR) {
                                        junit allowEmptyResults: true, testResults: 'test-results.xml'
                                    }
                                }
                            }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                dir(MODULE_DIR) {
                                    echo "Running SonarQube analysis for ${MODULE_NAME}..."
                                    withSonarQubeEnv('scanner') {
                                        sh "${tool('SonarScanner')}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY}"
                                    }
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                echo "Checking SonarQube Quality Gate for ${MODULE_NAME}..."
                                timeout(time: 5, unit: 'MINUTES') {
                                    waitForQualityGate abortPipeline: true
                                }
                            }
                        }
                    }
                }
                
                // --- AI-Service Module (Python) ---
                stage('AI-Service CI') {
                    agent {
                        docker {
                            image 'python:3.9-slim' // Using a Docker agent for this Python stage
                            // args '-v /var/run/docker.sock:/var/run/docker.sock' // Uncomment if Docker-in-Docker is needed for this stage
                        } 
                    }
                    environment {
                        MODULE_DIR = "AI-Service" // This will be relative to the workspace root mounted in the Docker container
                        MODULE_NAME = "tunihire-ai-service"
                        SONAR_PROJECT_KEY = "TuniHire_AIService"
                    }
                    stages {
                        stage('Install Dependencies') {
                            steps {
                                // dir(MODULE_DIR) // context is already /var/lib/jenkins/workspace/your-job-name/AI-Service inside the container if workspace is mounted
                                echo "Installing ${MODULE_NAME} (Python) dependencies inside Docker..."
                                sh "pip install -r ${MODULE_DIR}/requirements.txt" // Path relative to workspace root
                            }
                        }
                        stage('Run Tests') {
                            when { expression { return !params.SKIP_TESTS } }
                            steps {
                                echo "Running ${MODULE_NAME} (Python) tests inside Docker..."
                                sh "python ${MODULE_DIR}/test_face_recognition.py" // Path relative to workspace root
                            }
                        }
                        stage('SonarQube Analysis') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                // SonarScanner needs to be available in this python:3.9-slim container or run differently.
                                // Option 1: Install SonarScanner in the python image (complex for this Jenkinsfile)
                                // Option 2: Use a different Docker image that has both Python and SonarScanner.
                                // Option 3: If SonarScanner is on the Jenkins agent, this stage might need to run on the default agent
                                //           AFTER Python dependencies/tests are done in their own Dockerized stage.
                                // For now, let's assume SonarScanner is available or this step will be refined.
                                echo "Running SonarQube analysis for ${MODULE_NAME}... (May require SonarScanner in Docker image or different agent setup)"
                                withSonarQubeEnv('scanner') {
                                    // This sh command will run inside the python:3.9-slim container.
                                    // SonarScanner CLI needs to be installed in it, or this step needs rethinking.
                                    // For simplicity, we'll try, but it will likely fail if sonar-scanner is not in python:3.9-slim.
                                    sh "${tool('SonarScanner')}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=${MODULE_DIR} -Dsonar.python.version=3.9"
                                }
                            }
                        }
                        stage('SonarQube Quality Gate') {
                            when { expression { return !params.SKIP_SONAR } }
                            steps {
                                echo "Checking SonarQube Quality Gate for ${MODULE_NAME}..."
                                timeout(time: 5, unit: 'MINUTES') {
                                    waitForQualityGate abortPipeline: true
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            when { expression { return !params.SKIP_DOCKER_BUILD_PUSH } }
            steps {
                script {
                    def backendImage = "${env.NEXUS_REGISTRY_URL}/tunihire-backend:${env.BASE_APP_VERSION}"
                    def frontendImage = "${env.NEXUS_REGISTRY_URL}/tunihire-frontend:${env.BASE_APP_VERSION}"
                    def companyPanelImage = "${env.NEXUS_REGISTRY_URL}/tunihire-company-panel:${env.BASE_APP_VERSION}"
                    def adminPanelImage = "${env.NEXUS_REGISTRY_URL}/tunihire-admin-panel:${env.BASE_APP_VERSION}"
                    def aiServiceImage = "${env.NEXUS_REGISTRY_URL}/tunihire-ai-service:${env.BASE_APP_VERSION}"

                    echo "Building all Docker images via docker-compose..."
                    sh "docker-compose -f docker-compose.yml build"

                    echo "Tagging Docker images for Nexus..."
                    sh "docker tag tunihire_tunihire_backend ${backendImage}"
                    sh "docker tag tunihire_tunihire_frontend ${frontendImage}"
                    sh "docker tag tunihire_tunihire_company_panel ${companyPanelImage}"
                    sh "docker tag tunihire_tunihire_admin_panel ${adminPanelImage}"
                    sh "docker tag tunihire_tunihire_ai_service ${aiServiceImage}"

                    echo "Pushing Docker images to Nexus registry ${env.NEXUS_REGISTRY_URL}"
                    withDockerRegistry(credentialsId: env.NEXUS_CREDENTIALS_ID, registry: "http://${env.NEXUS_REGISTRY_URL}") {
                        sh "docker push ${backendImage}"
                        sh "docker push ${frontendImage}"
                        sh "docker push ${companyPanelImage}"
                        sh "docker push ${adminPanelImage}"
                        sh "docker push ${aiServiceImage}"
                    }
                }
            }
        }

        stage('Deploy Application') {
            when { expression { return !params.SKIP_DEPLOY } }
            steps {
                script {
                    echo "Deploying application using Docker Compose..."
                    try {
                        sh "docker-compose -f docker-compose.yml down --remove-orphans"
                    } catch (err) {
                        echo "No existing services to take down or error during takedown: ${err.getMessage()}"
                    }
                    
                    withCredentials([
                        string(credentialsId: 'SESSION_SECRET', variable: 'SESSION_SECRET'),
                        string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY'),
                        string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET'),
                        string(credentialsId: 'GOOGLE_CLIENT_ID', variable: 'GOOGLE_CLIENT_ID'),
                        string(credentialsId: 'GOOGLE_CLIENT_SECRET', variable: 'GOOGLE_CLIENT_SECRET'),
                        string(credentialsId: 'GITHUB_CLIENT_ID', variable: 'GITHUB_CLIENT_ID'),
                        string(credentialsId: 'GITHUB_CLIENT_SECRET', variable: 'GITHUB_CLIENT_SECRET'),
                        string(credentialsId: 'EMAIL_USER', variable: 'EMAIL_USER'),
                        string(credentialsId: 'EMAIL_PASSWORD', variable: 'EMAIL_PASSWORD'),
                        string(credentialsId: 'EMAIL_APP_USER', variable: 'EMAIL_APP_USER'),
                        string(credentialsId: 'EMAIL_APP_PASSWORD', variable: 'EMAIL_APP_PASSWORD')
                    ]) {
                        sh """
                        export GITHUB_CALLBACK_URL=\"${env.GITHUB_CALLBACK_URL_CONFIG}\"
                        export FRONTEND_URL=\"${env.FRONTEND_URL_CONFIG}\"
                        export SMTP_PORT=\"${env.SMTP_PORT_CONFIG}\"
                        docker-compose -f docker-compose.yml up -d
                        """
                    }
                    echo "Application deployed."
                    echo "Backend: http://localhost:5000"
                    echo "Frontend: http://localhost:3000"
                    echo "Company Panel: http://localhost:3001"
                    echo "Admin Panel: http://localhost:3002"
                    echo "AI Service: http://localhost:5001"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Cleaning up workspace..."
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}

