# Dockerfile pour AI-Service (Python/Flask) - Optimisé pour une construction plus rapide

# Stage 1: Builder stage pour installer des dépendances lourdes
FROM python:3.9-slim AS builder

# Définir le répertoire de travail dans le conteneur
WORKDIR /app

# Installer les dépendances système nécessaires pour dlib et face_recognition
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    libgtk-3-dev \
    liblapack-dev \
    libopenblas-dev \
    libx11-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copier les fichiers de requirements
COPY requirements.txt .
COPY requirements-base.txt .

# Mettre à jour pip et installer wheel pour des installations plus efficaces
RUN pip install --no-cache-dir --upgrade pip wheel setuptools

# Installer les dépendances de base d'abord (plus légères)
RUN pip install --no-cache-dir --timeout 300 -r requirements-base.txt

# Installer dlib séparément (étape critique et longue)
RUN pip install --no-cache-dir --timeout 600 dlib==19.24.0

# Installer PyTorch avec un timeout plus long
RUN pip install --no-cache-dir --timeout 600 --extra-index-url https://download.pytorch.org/whl/cpu torch==2.0.1+cpu

# Installer transformers après PyTorch
RUN pip install --no-cache-dir --timeout 300 transformers==4.30.2

# Installer face_recognition après dlib
RUN pip install --no-cache-dir --timeout 300 face_recognition==1.3.0 opencv-python-headless==4.8.0.74

# Stage 2: Image finale plus légère
FROM python:3.9-slim

WORKDIR /app

# Installer les dépendances système minimales pour l'exécution
RUN apt-get update && apt-get install -y \
    libgtk-3-dev \
    libopenblas-dev \
    libx11-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copier seulement les packages Python installés depuis le builder
COPY --from=builder /usr/local/lib/python3.9/site-packages/ /usr/local/lib/python3.9/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# Copier le code de l'application
COPY . .

# Configurer les variables d'environnement
ENV PYTHONUNBUFFERED=1

# Exposer le port de l'application
EXPOSE 5001

# Commande pour démarrer l'application Flask
CMD ["python", "app.py"]
